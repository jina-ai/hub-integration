name: Integrated test

on:
  schedule:
    # Every day 11:40 Shanghai time
    - cron:  '40 3 * * *'
  workflow_dispatch:

jobs:
  integrated-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # python-version: ['3.7', '3.8', '3.9']
        python-version: ['3.7']
        case-path:
          - success/case1
          # - success/case2
          # - success/case3
          # # - success/case4
          # - success/case5
          # - success/case6
          # - success/case7
          # - success/case8
          # - success/case9

    env:
      NODE_ENV: testing
      JINA_HUBBLE_REGISTRY: http://localhost:3000

    steps:
      - name: Clone latest hubble code
        uses: actions/checkout@v2
        with:
          repository: jina-ai/hubble
          token: ${{ secrets.JINA_DEV_BOT }}
          ref: refs/heads/master
          path: hubble
          lfs: true

      - name: mk logs folder
        run: mkdir logs
      
      - name: Start containers
        run: | 
          mkdir -p /tmp/jina-uploaded /tmp/jina-hubble-temp
          sudo chown -R $USER:$USER /tmp/jina-uploaded /tmp/jina-hubble-temp
          docker-compose up -d
        working-directory: hubble
        
      - name: setup knative
        uses: mapleeit/actions-setup-knative@main
      - run: minikube tunnel --profile knative &> /dev/null &

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - run: yarn install --frozen-lockfile
        working-directory: hubble
      - run: npm run build --if-present
        working-directory: hubble
      - run: npm run start:prod > ../logs/server.log &
        working-directory: hubble

      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Clone latest jina code
        uses: actions/checkout@v2
        with:
          repository: jina-ai/jina
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/heads/master
          path: jina

      - name: pip install jina
        working-directory: jina
        run: pip install -e '.[standard]'

      - name: Clone latest case1-9 code
        uses: actions/checkout@v2
        with:
          repository: jina-ai/executor-cases
          ref: refs/heads/main
          path: cases

      - name: Check node server
        run: |
          status=1
          for ((i=1;i<=30;i++));
          do
            curl --silent --fail $JINA_HUBBLE_REGISTRY/ping
            status=$?
            if test $status = 0; then
              break
            fi
            sleep 2
          done
          exit $status
        shell: bash {0}

      - name: test case - ${{ matrix.case-path }}
        id: do_test
        run: jina hub push ${{ matrix.case-path }} | tee ../logs/build.log
        working-directory: cases
        
      - name: extract id
        id: extract_id
        run: cat logs/build.log | grep -oE "executor/[0-9a-z]*" | sed 's/\// /' | awk '{printf "::set-output name=id::%s\n", $2}'

      - name: run executor
        run: jina executor --uses jinahub://${{ steps.extract_id.outputs.id }} & # > logs/executor.log

      - name: run executor with docker
        run: jina executor --uses jinahub+docker://${{ steps.extract_id.outputs.id }} & # > logs/executor_docker.log

      - name: run executor with sandbox
        run: jina executor --uses jinahub+sandbox://${{ steps.extract_id.outputs.id }} & # > logs/executor_sandbox.log

      # - name: send slack message
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,eventName,job,took
      #     author_name: Hubble/Core Integration Test
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NIGHTLY_TESTS_WEBHOOK }}
      #     MATRIX_CONTEXT: ${{ toJson(matrix) }}

      - name: get docker compose logs
        if: always()
        run: docker-compose logs > ../logs/docker-compose.log
        working-directory: hubble

      - name: Archive server log results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: logs

      - name: Stop containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down
        working-directory: hubble
